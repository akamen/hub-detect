import java.io.File

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE')
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1"
    }
}
plugins {
    id 'groovy'
    id 'eclipse'
    id 'maven'
    id 'signing'
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'com.github.hierynomus.license' version '0.14.0'
}

apply plugin: 'maven'

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'

version = '1.0.1'

def versionFile = new File("${projectDir}/src/main/resources/version.txt")
versionFile.delete()
versionFile << version

// the override.snaphot property should be set to true for a CI build so
// that the version is omitted from a snapshot build artifact
if (version.contains('SNAPSHOT') && "true" == project.findProperty('override.snapshot')) {
    version = 'latest-SNAPSHOT'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

build {
    doLast {
        def shellScriptTemplateFile = new File("${projectDir}/src/main/resources/hub-detect-sh")
        def shellScriptContents = shellScriptTemplateFile.getText('UTF-8')
        if (!version.contains('SNAPSHOT')) {
            shellScriptContents = shellScriptContents.replaceFirst("DETECT_LATEST_RELEASE_VERSION=\\S*\n", "DETECT_LATEST_RELEASE_VERSION=\"${version}\"\n")
            shellScriptTemplateFile.delete()
            shellScriptTemplateFile << shellScriptContents
        }
        def shellScriptFile = new File("${buildDir}/hub-detect.sh")
        shellScriptFile.delete()
        shellScriptFile << shellScriptContents
        shellScriptFile.setExecutable(true)
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:13.2.2'
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.apache.maven.shared:maven-invoker:3.0.0'
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
    compile 'com.moandjiezana.toml:toml4j:0.7.1'
    compile 'org.codehaus.groovy:groovy-all:2.4.11'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

springBoot { mainClass = 'com.blackducksoftware.integration.hub.detect.Application' }

jacocoTestReport {
    reports { xml.enabled = true }
}

license {
    header = file('HEADER')
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    ignoreFailures = true
    includes (["**/*.groovy", "**/*.java"])
    exclude "/src/test/*"
}

tasks.licenseMain.dependsOn(licenseFormatMain)


gradle.taskGraph.whenReady {
    if (gradle.taskGraph.hasTask(":uploadArchives")) {
        println "Uploading ${rootProject.name} version ${version} to maven central."
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
 archives jar
 archives javadocJar
 archives sourcesJar
}

task customSigning {
    doLast {
       // required { gradle.taskGraph.hasTask("uploadArchives") }
//        signing.sign configurations.archives
    File libDirectory = new File("${buildDir}/libs")
    File[] jarFiles = libDirectory.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            if(name.endsWith(".jar")) {
                return true
            }
            return false
        }
    })
    signing.sign(jarFiles)
    }
}

task createPom << {
    pom{
        project {
            name rootProject.name
            description rootProject.description
            url 'https://github.com/blackducksoftware/hub-detect'
            packaging 'jar'
            scm {
                connection 'scm:git:git://github.com/blackducksoftware/hub-detect.git'
                developerConnection 'scm:git:git@github.com:blackducksoftware/hub-detect.git'
                url 'https://www.github.com/blackducksoftware/hub-detect'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                }
            }
            developers {
                developer {
                    id 'blackduckoss'
                    name 'Black Duck OSS'
                    email 'bdsoss@blackducksoftware.com'
                    organization 'Black Duck Software, Inc.'
                    organizationUrl 'http://www.blackducksoftware.com'
                    roles { role 'developer' }
                    timezone 'America/New_York'
                }
            }
        }
    }.writeTo("${buildDir}/poms/pom.xml")
    File pomFile = file("${buildDir}/poms/pom.xml")
    signing.sign(pomFile)
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment ->
//               File libDirectory = new File("${buildDir}/libs")
//               File[] jarFiles = libDirectory.listFiles(new FilenameFilter() {
//                   @Override
//                   boolean accept(File dir, String name) {
//                       if(name.endsWith(".jar")) {
//                           return true
//                       }
//                       return false
//                   }
//               })
//               signing.sign(jarFiles)
//               deployment.getArtifacts().each {
//                   println "Artifact ${it} name ${it.getFile().getName()}"
//               }
//               
//               PublishArtifact establishedArtifact = deployment.getArtifacts().iterator().next()
//
//               File[] signatureFiles = libDirectory.listFiles(new FilenameFilter() {
//                   @Override
//                   boolean accept(File dir, String name) {
//                       if(name.endsWith(".jar.asc")) {
//                           return true
//                       }
//                       return false
//                   }
//               })
//               signatureFiles.each { signature ->
//                   println "Signature ${signature.getName()}"
//                   def artifact = [getDate: establishedArtifact.getDate(), getExtension: 'jar.asc',getFile: signature ,getName: signature.getName(), getType: 'jar.asc'] as PublishArtifact
//                   deployment.addArtifact(artifact)
//                   println "Signature ${signature.getName()}"
//               }
//               signing.signPom(deployment)
//            }
//            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
//                authentication(userName: sonatypeUsername, password: sonatypePassword)
//            }
//            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
//                authentication(userName: sonatypeUsername, password: sonatypePassword)
//            }
//            pom.project {
//                name rootProject.name
//                description rootProject.description
//                url 'https://github.com/blackducksoftware/hub-detect'
//                packaging 'jar'
//                scm {
//                    connection 'scm:git:git://github.com/blackducksoftware/hub-detect.git'
//                    developerConnection 'scm:git:git@github.com:blackducksoftware/hub-detect.git'
//                    url 'https://www.github.com/blackducksoftware/hub-detect'
//                }
//                licenses {
//                    license {
//                        name 'Apache License 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0'
//                    }
//                }
//                developers {
//                    developer {
//                        id 'blackduckoss'
//                        name 'Black Duck OSS'
//                        email 'bdsoss@blackducksoftware.com'
//                        organization 'Black Duck Software, Inc.'
//                        organizationUrl 'http://www.blackducksoftware.com'
//                        roles { role 'developer' }
//                        timezone 'America/New_York'
//                    }
//                }
//            }
//        }
//    }
//}