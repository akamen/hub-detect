[
  {
    "propertyKey": "detect.suppress.configuration.output",
    "detectPropertyName": "suppressConfigurationOutput",
    "detectConfigurationName": "SuppressConfigurationOutput",
    "description": "If true, the default behavior of printing your configuration properties at startup will be suppressed.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "LOGGING",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 0,
    "configurationOrder": 64
  },
  {
    "propertyKey": "detect.suppress.results.output",
    "detectPropertyName": "suppressResultsOutput",
    "detectConfigurationName": "SuppressResultsOutput",
    "description": "If true, the default behavior of printing the Detect Results will be suppressed.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "LOGGING",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 1,
    "configurationOrder": 65
  },
  {
    "propertyKey": "detect.cleanup.bdio.files",
    "detectPropertyName": "cleanupBdioFiles",
    "detectConfigurationName": "CleanupBdioFiles",
    "description": "If true the bdio files will be deleted after upload",
    "defaultValue": "true",
    "propertyType": "Boolean",
    "group": "CLEANUP",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 2,
    "configurationOrder": 0
  },
  {
    "propertyKey": "detect.test.connection",
    "detectPropertyName": "testConnection",
    "detectConfigurationName": "TestConnection",
    "description": "Test the connection to the Hub with the current configuration",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "HUB_CONFIGURATION",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 3,
    "configurationOrder": 1
  },
  {
    "propertyKey": "detect.api.timeout",
    "detectPropertyName": "apiTimeout",
    "detectConfigurationName": "ApiTimeout",
    "description": "Timeout for response from the hub regarding your project (i.e. risk reports and policy check). When changing this value, keep in mind the checking of policies might have to wait for a new scan to process which can take some time.",
    "defaultValue": "300000",
    "propertyType": "Long",
    "group": "PROJECT_INFO",
    "javaCodePrefix": "convertLong(",
    "javaCodeSuffix": ")",
    "propertyOrder": 4,
    "configurationOrder": 2
  },
  {
    "propertyKey": "blackduck.hub.url",
    "detectPropertyName": "hubUrl",
    "detectConfigurationName": "HubUrl",
    "description": "URL of the Hub server",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 5,
    "configurationOrder": 3
  },
  {
    "propertyKey": "blackduck.hub.timeout",
    "detectPropertyName": "hubTimeout",
    "detectConfigurationName": "HubTimeout",
    "description": "Time to wait for rest connections to complete",
    "defaultValue": "120",
    "propertyType": "Integer",
    "group": "HUB_CONFIGURATION",
    "javaCodePrefix": "convertInt(",
    "javaCodeSuffix": ")",
    "propertyOrder": 6,
    "configurationOrder": 4
  },
  {
    "propertyKey": "blackduck.hub.username",
    "detectPropertyName": "hubUsername",
    "detectConfigurationName": "HubUsername",
    "description": "Hub username",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 7,
    "configurationOrder": 5
  },
  {
    "propertyKey": "blackduck.hub.password",
    "detectPropertyName": "hubPassword",
    "detectConfigurationName": "HubPassword",
    "description": "Hub password",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 8,
    "configurationOrder": 6
  },
  {
    "propertyKey": "blackduck.hub.proxy.host",
    "detectPropertyName": "hubProxyHost",
    "detectConfigurationName": "HubProxyHost",
    "description": "Proxy host",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 9,
    "configurationOrder": 7
  },
  {
    "propertyKey": "blackduck.hub.proxy.port",
    "detectPropertyName": "hubProxyPort",
    "detectConfigurationName": "HubProxyPort",
    "description": "Proxy port",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 10,
    "configurationOrder": 8
  },
  {
    "propertyKey": "blackduck.hub.proxy.username",
    "detectPropertyName": "hubProxyUsername",
    "detectConfigurationName": "HubProxyUsername",
    "description": "Proxy username",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 11,
    "configurationOrder": 9
  },
  {
    "propertyKey": "blackduck.hub.proxy.password",
    "detectPropertyName": "hubProxyPassword",
    "detectConfigurationName": "HubProxyPassword",
    "description": "Proxy password",
    "propertyType": "String",
    "group": "HUB_CONFIGURATION",
    "propertyOrder": 12,
    "configurationOrder": 10
  },
  {
    "propertyKey": "blackduck.hub.trust.cert",
    "detectPropertyName": "hubTrustCertificate",
    "detectConfigurationName": "HubTrustCertificate",
    "description": "If true, automatically trust the certificate for the current run of Detect only",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "HUB_CONFIGURATION",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 13,
    "configurationOrder": 12
  },
  {
    "propertyKey": "blackduck.hub.offline.mode",
    "detectPropertyName": "hubOfflineMode",
    "detectConfigurationName": "HubOfflineMode",
    "description": "This can disable any Hub communication - if true, Detect will not upload BDIO files, it will not check policies, and it will not download and install the signature scanner.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "HUB_CONFIGURATION",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 14,
    "configurationOrder": 11
  },
  {
    "propertyKey": "detect.source.path",
    "detectPropertyName": "sourcePath",
    "detectConfigurationName": "SourcePath",
    "description": "scription(description \u003d ",
    "propertyType": "String",
    "group": "PATHS",
    "propertyOrder": 15,
    "configurationOrder": 13
  },
  {
    "propertyKey": "detect.output.path",
    "detectPropertyName": "outputDirectoryPath",
    "detectConfigurationName": "OutputDirectoryPath",
    "description": "scription(description \u003d ",
    "propertyType": "String",
    "group": "PATHS",
    "propertyOrder": 16,
    "configurationOrder": 14
  },
  {
    "propertyKey": "detect.search.depth",
    "detectPropertyName": "searchDepth",
    "detectConfigurationName": "SearchDepth",
    "description": "scription(description \u003d ",
    "defaultValue": "3",
    "propertyType": "Integer",
    "group": "PATHS",
    "javaCodePrefix": "convertInt(",
    "javaCodeSuffix": ")",
    "propertyOrder": 17,
    "configurationOrder": 15
  },
  {
    "propertyKey": "detect.excluded.bom.tool.types",
    "detectPropertyName": "excludedBomToolTypes",
    "detectConfigurationName": "ExcludedBomToolTypes",
    "description": "scription(description \u003d ",
    "propertyType": "String",
    "group": "BOMTOOL",
    "javaCodeSuffix": "?.toUpperCase()",
    "propertyOrder": 18,
    "configurationOrder": 16
  },
  {
    "propertyKey": "detect.included.bom.tool.types",
    "detectPropertyName": "includedBomToolTypes",
    "detectConfigurationName": "IncludedBomToolTypes",
    "description": "scription(description \u003d ",
    "propertyType": "String",
    "group": "BOMTOOL",
    "javaCodeSuffix": "?.toUpperCase()",
    "propertyOrder": 19,
    "configurationOrder": 17
  },
  {
    "propertyKey": "detect.project.name",
    "detectPropertyName": "projectName",
    "detectConfigurationName": "ProjectName",
    "description": "scription(description \u003d ",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 20,
    "configurationOrder": 18
  },
  {
    "propertyKey": "detect.project.version.name",
    "detectPropertyName": "projectVersionName",
    "detectConfigurationName": "ProjectVersionName",
    "description": "scription(description \u003d ",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 21,
    "configurationOrder": 19
  },
  {
    "propertyKey": "detect.project.codelocation.prefix",
    "detectPropertyName": "projectCodeLocationPrefix",
    "detectConfigurationName": "ProjectCodeLocationPrefix",
    "description": "scription(description \u003d ",
    "defaultValue": "",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 22,
    "configurationOrder": 20
  },
  {
    "propertyKey": "detect.project.codelocation.suffix",
    "detectPropertyName": "projectCodeLocationSuffix",
    "detectConfigurationName": "ProjectCodeLocationSuffix",
    "description": "scription(description \u003d ",
    "defaultValue": "",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 23,
    "configurationOrder": 21
  },
  {
    "propertyKey": "detect.project.codelocation.delete.old.names",
    "detectPropertyName": "projectCodeLocationDeleteOldNames",
    "detectConfigurationName": "ProjectCodeLocationDeleteOldNames",
    "description": "scription(description \u003d ",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "PROJECT_INFO",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 24,
    "configurationOrder": 22
  },
  {
    "propertyKey": "detect.project.level.adjustments",
    "detectPropertyName": "projectLevelMatchAdjustments",
    "detectConfigurationName": "ProjectLevelMatchAdjustments",
    "description": "scription(description \u003d ",
    "defaultValue": "true",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 25,
    "configurationOrder": 23
  },
  {
    "propertyKey": "detect.project.version.phase",
    "detectPropertyName": "projectVersionPhase",
    "detectConfigurationName": "ProjectVersionPhase",
    "description": "scription(description \u003d ",
    "defaultValue": "Development",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 26,
    "configurationOrder": 24
  },
  {
    "propertyKey": "detect.project.version.distribution",
    "detectPropertyName": "projectVersionDistribution",
    "detectConfigurationName": "ProjectVersionDistribution",
    "description": "scription(description \u003d ",
    "defaultValue": "External",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 27,
    "configurationOrder": 25
  },
  {
    "propertyKey": "detect.policy.check",
    "detectPropertyName": "policyCheck",
    "detectConfigurationName": "PolicyCheck",
    "description": "scription(description \u003d ",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "POLICY_CHECK",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 28,
    "configurationOrder": 26
  },
  {
    "propertyKey": "detect.gradle.inspector.version",
    "detectPropertyName": "gradleInspectorVersion",
    "detectConfigurationName": "GradleInspectorVersion",
    "description": "Version of the Gradle Inspector",
    "defaultValue": "latest",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 29,
    "configurationOrder": 27
  },
  {
    "propertyKey": "detect.gradle.build.command",
    "detectPropertyName": "gradleBuildCommand",
    "detectConfigurationName": "GradleBuildCommand",
    "description": "Gradle build command",
    "defaultValue": "dependencies",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 30,
    "configurationOrder": 28
  },
  {
    "propertyKey": "detect.gradle.excluded.configurations",
    "detectPropertyName": "gradleExcludedConfigurationNames",
    "detectConfigurationName": "GradleExcludedConfigurationNames",
    "description": "The names of the dependency configurations to exclude",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 31,
    "configurationOrder": 29
  },
  {
    "propertyKey": "detect.gradle.included.configurations",
    "detectPropertyName": "gradleIncludedConfigurationNames",
    "detectConfigurationName": "GradleIncludedConfigurationNames",
    "description": "The names of the dependency configurations to include",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 32,
    "configurationOrder": 30
  },
  {
    "propertyKey": "detect.gradle.excluded.projects",
    "detectPropertyName": "gradleExcludedProjectNames",
    "detectConfigurationName": "GradleExcludedProjectNames",
    "description": "The names of the projects to exclude",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 33,
    "configurationOrder": 31
  },
  {
    "propertyKey": "detect.gradle.included.projects",
    "detectPropertyName": "gradleIncludedProjectNames",
    "detectConfigurationName": "GradleIncludedProjectNames",
    "description": "The names of the projects to include",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 34,
    "configurationOrder": 32
  },
  {
    "propertyKey": "detect.gradle.cleanup.build.blackduck.directory",
    "detectPropertyName": "gradleCleanupBuildBlackduckDirectory",
    "detectConfigurationName": "GradleCleanupBuildBlackduckDirectory",
    "description": "Set this to false if you do not want the \u0027blackduck\u0027 directory in your build directory to be deleted.",
    "defaultValue": "true",
    "propertyType": "Boolean",
    "group": "GRADLE",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 35,
    "configurationOrder": 33
  },
  {
    "propertyKey": "detect.nuget.inspector.name",
    "detectPropertyName": "nugetInspectorPackageName",
    "detectConfigurationName": "NugetInspectorPackageName",
    "description": "Name of the Nuget Inspector",
    "defaultValue": "IntegrationNugetInspector",
    "propertyType": "String",
    "group": "NUGET",
    "propertyOrder": 36,
    "configurationOrder": 34
  },
  {
    "propertyKey": "detect.nuget.inspector.version",
    "detectPropertyName": "nugetInspectorPackageVersion",
    "detectConfigurationName": "NugetInspectorPackageVersion",
    "description": "Version of the Nuget Inspector",
    "defaultValue": "latest",
    "propertyType": "String",
    "group": "NUGET",
    "propertyOrder": 37,
    "configurationOrder": 35
  },
  {
    "propertyKey": "detect.nuget.excluded.modules",
    "detectPropertyName": "nugetInspectorExcludedModules",
    "detectConfigurationName": "NugetInspectorExcludedModules",
    "description": "The names of the projects in a solution to exclude",
    "propertyType": "String",
    "group": "NUGET",
    "propertyOrder": 38,
    "configurationOrder": 36
  },
  {
    "propertyKey": "detect.nuget.ignore.failure",
    "detectPropertyName": "nugetInspectorIgnoreFailure",
    "detectConfigurationName": "NugetInspectorIgnoreFailure",
    "description": "If true errors will be logged and then ignored.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "NUGET",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 39,
    "configurationOrder": 37
  },
  {
    "propertyKey": "detect.maven.scope",
    "detectPropertyName": "mavenScope",
    "detectConfigurationName": "MavenScope",
    "description": "The name of the dependency scope to include",
    "propertyType": "String",
    "group": "MAVEN",
    "propertyOrder": 40,
    "configurationOrder": 38
  },
  {
    "propertyKey": "detect.maven.build.command",
    "detectPropertyName": "mavenBuildCommand",
    "detectConfigurationName": "MavenBuildCommand",
    "description": "Maven build command",
    "propertyType": "String",
    "group": "MAVEN",
    "propertyOrder": 41,
    "configurationOrder": 43
  },
  {
    "propertyKey": "detect.gradle.path",
    "detectPropertyName": "gradlePath",
    "detectConfigurationName": "GradlePath",
    "description": "Path of the Gradle executable",
    "propertyType": "String",
    "group": "GRADLE",
    "propertyOrder": 42,
    "configurationOrder": 39
  },
  {
    "propertyKey": "detect.maven.path",
    "detectPropertyName": "mavenPath",
    "detectConfigurationName": "MavenPath",
    "description": "The path of the Maven executable",
    "propertyType": "String",
    "group": "MAVEN",
    "propertyOrder": 43,
    "configurationOrder": 40
  },
  {
    "propertyKey": "detect.maven.excluded.modules",
    "detectPropertyName": "mavenExcludedModuleNames",
    "detectConfigurationName": "MavenExcludedModuleNames",
    "description": "The names of the module to exclude",
    "propertyType": "String",
    "group": "MAVEN",
    "propertyOrder": 44,
    "configurationOrder": 41
  },
  {
    "propertyKey": "detect.maven.included.modules",
    "detectPropertyName": "mavenIncludedModuleNames",
    "detectConfigurationName": "MavenIncludedModuleNames",
    "description": "The names of the module to include",
    "propertyType": "String",
    "group": "MAVEN",
    "propertyOrder": 45,
    "configurationOrder": 42
  },
  {
    "propertyKey": "detect.nuget.path",
    "detectPropertyName": "nugetPath",
    "detectConfigurationName": "NugetPath",
    "description": "The path of the Nuget executable",
    "propertyType": "String",
    "group": "NUGET",
    "propertyOrder": 46,
    "configurationOrder": 44
  },
  {
    "propertyKey": "detect.pip.project.name",
    "detectPropertyName": "pipProjectName",
    "detectConfigurationName": "PipProjectName",
    "description": "Override for pip inspector to find your project",
    "propertyType": "String",
    "group": "PIP",
    "propertyOrder": 47,
    "configurationOrder": 50
  },
  {
    "propertyKey": "detect.python.python3",
    "detectPropertyName": "pythonThreeOverride",
    "detectConfigurationName": "PythonThreeOverride",
    "description": "If true will use Python 3 if available on class path",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "PYTHON",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 48,
    "configurationOrder": 51
  },
  {
    "propertyKey": "detect.python.path",
    "detectPropertyName": "pythonPath",
    "detectConfigurationName": "PythonPath",
    "description": "The path of the Python executable",
    "propertyType": "String",
    "group": "PYTHON",
    "propertyOrder": 49,
    "configurationOrder": 52
  },
  {
    "propertyKey": "detect.npm.path",
    "detectPropertyName": "npmPath",
    "detectConfigurationName": "NpmPath",
    "description": "The path of the Npm executable",
    "propertyType": "String",
    "group": "NPM",
    "propertyOrder": 50,
    "configurationOrder": 45
  },
  {
    "propertyKey": "detect.npm.include.dev.dependencies",
    "detectPropertyName": "npmIncludeDevDependencies",
    "detectConfigurationName": "NpmIncludeDevDependencies",
    "description": "Set this value to false if you would like to exclude your dev dependencies when ran",
    "defaultValue": "true",
    "propertyType": "String",
    "group": "NPM",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 51,
    "configurationOrder": 46
  },
  {
    "propertyKey": "detect.npm.node.path",
    "detectPropertyName": "npmNodePath",
    "detectConfigurationName": "NpmNodePath",
    "description": "The path of the node executable that is used by Npm",
    "propertyType": "String",
    "group": "NPM",
    "propertyOrder": 52,
    "configurationOrder": 47
  },
  {
    "propertyKey": "detect.pear.path",
    "detectPropertyName": "pearPath",
    "detectConfigurationName": "PearPath",
    "description": "The path of the pear executable",
    "propertyType": "String",
    "group": "PEAR",
    "propertyOrder": 53,
    "configurationOrder": 48
  },
  {
    "propertyKey": "detect.pear.only.required.deps",
    "detectPropertyName": "pearOnlyRequiredDependencies",
    "detectConfigurationName": "PearOnlyRequiredDependencies",
    "description": "Set to true if you would like to include only required packages",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "PEAR",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 54,
    "configurationOrder": 49
  },
  {
    "propertyKey": "detect.pip.requirements.path",
    "detectPropertyName": "requirementsFilePath",
    "detectConfigurationName": "RequirementsFilePath",
    "description": "The path of the requirements.txt file",
    "propertyType": "String",
    "group": "PIP",
    "propertyOrder": 55,
    "configurationOrder": 53
  },
  {
    "propertyKey": "detect.go.dep.path",
    "detectPropertyName": "goDepPath",
    "detectConfigurationName": "GoDepPath",
    "description": "Path of the Go Dep executable",
    "propertyType": "String",
    "group": "GO",
    "propertyOrder": 56,
    "configurationOrder": 54
  },
  {
    "propertyKey": "detect.go.run.dep.init",
    "detectPropertyName": "goRunDepInit",
    "detectConfigurationName": "GoRunDepInit",
    "description": "If set to true, we will attempt to run \u0027init\u0027 and \u0027ensure\u0027 which can modify your development environment.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "GO",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 57,
    "configurationOrder": 55
  },
  {
    "propertyKey": "detect.docker.path",
    "detectPropertyName": "dockerPath",
    "detectConfigurationName": "DockerPath",
    "description": "Path of the docker executable",
    "propertyType": "String",
    "group": "DOCKER",
    "propertyOrder": 58,
    "configurationOrder": 56
  },
  {
    "propertyKey": "detect.docker.inspector.path",
    "detectPropertyName": "dockerInspectorPath",
    "detectConfigurationName": "DockerInspectorPath",
    "description": "This is used to override using the hosted script by github url. You can provide your own script at this path.",
    "propertyType": "String",
    "group": "DOCKER",
    "propertyOrder": 59,
    "configurationOrder": 57
  },
  {
    "propertyKey": "detect.docker.inspector.version",
    "detectPropertyName": "dockerInspectorVersion",
    "detectConfigurationName": "DockerInspectorVersion",
    "description": "Version of the Hub Docker Inspector to use",
    "defaultValue": "latest",
    "propertyType": "String",
    "group": "DOCKER",
    "propertyOrder": 60,
    "configurationOrder": 58
  },
  {
    "propertyKey": "detect.docker.tar",
    "detectPropertyName": "dockerTar",
    "detectConfigurationName": "DockerTar",
    "description": "A saved docker image - must be a .tar file. For detect to run docker either this property or detect.docker.image must be set.",
    "propertyType": "String",
    "group": "DOCKER",
    "propertyOrder": 61,
    "configurationOrder": 59
  },
  {
    "propertyKey": "detect.docker.image",
    "detectPropertyName": "dockerImage",
    "detectConfigurationName": "DockerImage",
    "description": "The docker image name to inspect. For detect to run docker either this property or detect.docker.tar must be set.",
    "propertyType": "String",
    "group": "DOCKER",
    "propertyOrder": 62,
    "configurationOrder": 60
  },
  {
    "propertyKey": "detect.bash.path",
    "detectPropertyName": "bashPath",
    "detectConfigurationName": "BashPath",
    "description": "Path of the bash executable",
    "propertyType": "String",
    "group": "PATHS",
    "propertyOrder": 63,
    "configurationOrder": 61
  },
  {
    "propertyKey": "logging.level.com.blackducksoftware.integration",
    "detectPropertyName": "loggingLevel",
    "detectConfigurationName": "LoggingLevel",
    "description": "The logging level of Detect (ALL|TRACE|DEBUG|INFO|WARN|ERROR|FATAL|OFF)",
    "defaultValue": "INFO",
    "propertyType": "String",
    "group": "LOGGING",
    "propertyOrder": 64,
    "configurationOrder": 62
  },
  {
    "propertyKey": "detect.cleanup.bom.tool.files",
    "detectPropertyName": "cleanupBomToolFiles",
    "detectConfigurationName": "CleanupBomToolFiles",
    "description": "Detect creates temporary files in the output directory. If set to true this will clean them up after execution",
    "defaultValue": "true",
    "propertyType": "Boolean",
    "group": "CLEANUP",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 65,
    "configurationOrder": 63
  },
  {
    "propertyKey": "detect.hub.signature.scanner.dry.run",
    "detectPropertyName": "hubSignatureScannerDryRun",
    "detectConfigurationName": "HubSignatureScannerDryRun",
    "description": "If set to true, the signature scanner results will not be uploaded to the Hub and the scanner results will be written to disk.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "SIGNATURE_SCANNER",
    "propertyOrder": 66,
    "configurationOrder": 66
  },
  {
    "propertyKey": "detect.hub.signature.scanner.exclusion.patterns",
    "detectPropertyName": "hubSignatureScannerExclusionPatterns",
    "detectConfigurationName": "HubSignatureScannerExclusionPatterns",
    "description": "Enables you to specify sub-directories to exclude from scans",
    "propertyType": "String[]",
    "group": "SIGNATURE_SCANNER",
    "propertyOrder": 67,
    "configurationOrder": 68
  },
  {
    "propertyKey": "detect.hub.signature.scanner.paths",
    "detectPropertyName": "hubSignatureScannerPaths",
    "detectConfigurationName": "HubSignatureScannerPaths",
    "description": "These paths and only these paths will be scanned.",
    "propertyType": "String[]",
    "group": "SIGNATURE_SCANNER",
    "propertyOrder": 68,
    "configurationOrder": 67
  },
  {
    "propertyKey": "detect.hub.signature.scanner.relative.paths.to.exclude",
    "detectPropertyName": "hubSignatureScannerRelativePathsToExclude",
    "description": "The relative paths of directories to be excluded from scan registration",
    "propertyType": "String[]",
    "group": "SIGNATURE_SCANNER",
    "propertyOrder": 69,
    "configurationOrder": 0
  },
  {
    "propertyKey": "detect.hub.signature.scanner.memory",
    "detectPropertyName": "hubSignatureScannerMemory",
    "detectConfigurationName": "HubSignatureScannerMemory",
    "description": "The memory for the scanner to use.",
    "defaultValue": "4096",
    "propertyType": "Integer",
    "group": "SIGNATURE_SCANNER",
    "javaCodePrefix": "convertInt(",
    "javaCodeSuffix": ")",
    "propertyOrder": 70,
    "configurationOrder": 72
  },
  {
    "propertyKey": "detect.hub.signature.scanner.disabled",
    "detectPropertyName": "hubSignatureScannerDisabled",
    "detectConfigurationName": "HubSignatureScannerDisabled",
    "description": "Set to true to disable the Hub Signature Scanner.",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "SIGNATURE_SCANNER",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 71,
    "configurationOrder": 73
  },
  {
    "propertyKey": "detect.hub.signature.scanner.offline.local.path",
    "detectPropertyName": "hubSignatureScannerOfflineLocalPath",
    "detectConfigurationName": "HubSignatureScannerOfflineLocalPath",
    "description": "To use a local signature scanner, set its location with this property. This will be the path that contains the \u0027Hub_Scan_Installation\u0027 directory where the signature scanner was unzipped.",
    "propertyType": "String",
    "group": "SIGNATURE_SCANNER",
    "propertyOrder": 72,
    "configurationOrder": 69
  },
  {
    "propertyKey": "detect.hub.signature.scanner.host.url",
    "detectPropertyName": "hubSignatureScannerHostUrl",
    "detectConfigurationName": "HubSignatureScannerHostUrl",
    "description": "If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Hub\u0027s urls for different operating systems.",
    "propertyType": "String",
    "group": "SIGNATURE_SCANNER",
    "propertyOrder": 73,
    "configurationOrder": 70
  },
  {
    "propertyKey": "detect.packagist.include.dev.dependencies",
    "detectPropertyName": "packagistIncludeDevDependencies",
    "detectConfigurationName": "PackagistIncludeDevDependencies",
    "description": "Set this value to false if you would like to exclude your dev requires dependencies when ran",
    "defaultValue": "true",
    "propertyType": "Boolean",
    "group": "PACKAGIST",
    "javaCodePrefix": "BooleanUtils.toBoolean(",
    "javaCodeSuffix": ")",
    "propertyOrder": 74,
    "configurationOrder": 71
  },
  {
    "propertyKey": "detect.perl.path",
    "detectPropertyName": "perlPath",
    "detectConfigurationName": "PerlPath",
    "description": "The path of the perl executable",
    "propertyType": "String",
    "group": "CPAN",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 75,
    "configurationOrder": 74
  },
  {
    "propertyKey": "detect.cpan.path",
    "detectPropertyName": "cpanPath",
    "detectConfigurationName": "CpanPath",
    "description": "The path of the cpan executable",
    "propertyType": "String",
    "group": "CPAN",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 76,
    "configurationOrder": 75
  },
  {
    "propertyKey": "detect.cpanm.path",
    "detectPropertyName": "cpanmPath",
    "detectConfigurationName": "CpanmPath",
    "description": "The path of the cpanm executable",
    "propertyType": "String",
    "group": "CPAN",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 77,
    "configurationOrder": 76
  },
  {
    "propertyKey": "detect.sbt.excluded.configurations",
    "detectPropertyName": "sbtExcludedConfigurationNames",
    "detectConfigurationName": "SbtExcludedConfigurationNames",
    "description": "The names of the sbt configurations to exclude",
    "propertyType": "String",
    "group": "SBT",
    "propertyOrder": 78,
    "configurationOrder": 77
  },
  {
    "propertyKey": "detect.sbt.included.configurations",
    "detectPropertyName": "sbtIncludedConfigurationNames",
    "detectConfigurationName": "SbtIncludedConfigurationNames",
    "description": "The names of the sbt configurations to include",
    "propertyType": "String",
    "group": "SBT",
    "propertyOrder": 79,
    "configurationOrder": 78
  },
  {
    "propertyKey": "detect.default.project.version.scheme",
    "detectPropertyName": "defaultProjectVersionScheme",
    "detectConfigurationName": "DefaultProjectVersionScheme",
    "description": "The scheme to use when the package managers can not determine a version, either \u0027text\u0027 or \u0027timestamp\u0027",
    "defaultValue": "text",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 80,
    "configurationOrder": 79
  },
  {
    "propertyKey": "detect.default.project.version.text",
    "detectPropertyName": "defaultProjectVersionText",
    "detectConfigurationName": "DefaultProjectVersionText",
    "description": "The text to use as the default project version",
    "defaultValue": "Detect Unknown Version",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 81,
    "configurationOrder": 80
  },
  {
    "propertyKey": "detect.default.project.version.timeformat",
    "detectPropertyName": "defaultProjectVersionTimeformat",
    "detectConfigurationName": "DefaultProjectVersionTimeformat",
    "description": "The timestamp format to use as the default project version",
    "defaultValue": "yyyy-MM-dd\u0027T\u0027HH:mm:ss.SSS",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 82,
    "configurationOrder": 81
  },
  {
    "propertyKey": "detect.bom.aggregate.name",
    "detectPropertyName": "aggregateBomName",
    "detectConfigurationName": "AggregateBomName",
    "description": "If set, this will aggregate all the BOMs to create a single BDIO file with the name provided. For Co-Pilot use only",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 83,
    "configurationOrder": 82
  },
  {
    "propertyKey": "detect.risk.report.pdf",
    "detectPropertyName": "riskReportPdf",
    "detectConfigurationName": "RiskReportPdf",
    "description": "When set to true, a Black Duck risk report in PDF form will be created",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "PROJECT_INFO",
    "propertyOrder": 84,
    "configurationOrder": 85
  },
  {
    "propertyKey": "detect.risk.report.pdf.path",
    "detectPropertyName": "riskReportPdfOutputDirectory",
    "detectConfigurationName": "RiskReportPdfOutputDirectory",
    "description": "The output directory for risk report in PDF. Default is the source directory",
    "defaultValue": ".",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "propertyOrder": 85,
    "configurationOrder": 86
  },
  {
    "propertyKey": "detect.notices.report",
    "detectPropertyName": "noticesReport",
    "detectConfigurationName": "NoticesReport",
    "description": "When set to true, a Black Duck notices report in text form will be created in your source directory",
    "defaultValue": "false",
    "propertyType": "Boolean",
    "group": "PROJECT_INFO",
    "propertyOrder": 86,
    "configurationOrder": 87
  },
  {
    "propertyKey": "detect.notices.report.path",
    "detectPropertyName": "noticesReportOutputDirectory",
    "detectConfigurationName": "NoticesReportOutputDirectory",
    "description": "The output directory for notices report. Default is the source directory",
    "defaultValue": ".",
    "propertyType": "String",
    "group": "PROJECT_INFO",
    "propertyOrder": 87,
    "configurationOrder": 88
  },
  {
    "propertyKey": "detect.conda.path",
    "detectPropertyName": "condaPath",
    "detectConfigurationName": "CondaPath",
    "description": "The path of the conda executable",
    "propertyType": "String",
    "group": "CONDA",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 88,
    "configurationOrder": 83
  },
  {
    "propertyKey": "detect.conda.environment.name",
    "detectPropertyName": "condaEnvironmentName",
    "detectConfigurationName": "CondaEnvironmentName",
    "description": "The name of the anaconda environment used by your project",
    "propertyType": "String",
    "group": "CONDA",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 89,
    "configurationOrder": 84
  },
  {
    "propertyKey": "detect.docker.inspector.air.gap.path",
    "detectPropertyName": "dockerInspectorAirGapPath",
    "detectConfigurationName": "DockerInspectorAirGapPath",
    "description": "The path to the directory containing the docker inspector script, jar, and images",
    "propertyType": "String",
    "group": "DOCKER",
    "javaCodePrefix": "getInspectorAirGapPath(",
    "javaCodeSuffix": ", DOCKER)",
    "propertyOrder": 90,
    "configurationOrder": 89
  },
  {
    "propertyKey": "detect.gradle.inspector.air.gap.path",
    "detectPropertyName": "gradleInspectorAirGapPath",
    "detectConfigurationName": "GradleInspectorAirGapPath",
    "description": "The path to the directory containing the air gap dependencies for the gradle inspector",
    "propertyType": "String",
    "group": "GRADLE",
    "javaCodePrefix": "getInspectorAirGapPath(",
    "javaCodeSuffix": ", GRADLE)",
    "propertyOrder": 91,
    "configurationOrder": 90
  },
  {
    "propertyKey": "detect.nuget.inspector.air.gap.path",
    "detectPropertyName": "nugetInspectorAirGapPath",
    "detectConfigurationName": "NugetInspectorAirGapPath",
    "description": "The path to the directory containing the nuget inspector nupkg",
    "propertyType": "String",
    "group": "NUGET",
    "javaCodePrefix": "getInspectorAirGapPath(",
    "javaCodeSuffix": ", NUGET)",
    "propertyOrder": 92,
    "configurationOrder": 91
  },
  {
    "propertyKey": "detect.nuget.packages.repo.url",
    "detectPropertyName": "nugetPackagesRepoUrl",
    "detectConfigurationName": "NugetPackagesRepoUrl",
    "description": "The source for nuget packages",
    "defaultValue": "https://www.nuget.org/api/v2/",
    "propertyType": "String",
    "group": "NUGET",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 93,
    "configurationOrder": 92
  },
  {
    "propertyKey": "detect.gradle.inspector.repository.url",
    "detectPropertyName": "gradleInspectorRepositoryUrl",
    "detectConfigurationName": "GradleInspectorRepositoryUrl",
    "description": "The respository gradle should use to look for the gradle inspector",
    "propertyType": "String",
    "group": "GRADLE",
    "javaCodeSuffix": "?.trim()",
    "propertyOrder": 94,
    "configurationOrder": 93
  }
]