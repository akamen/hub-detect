import java.nio.charset.StandardCharsets

import org.gradle.api.Task
import org.gradle.api.execution.TaskExecutionListener
import org.gradle.api.tasks.TaskState

import com.blackducksoftware.integration.gradle.DependencyGatherer

initscript {
    String airgapLibsPath = 'AIRGAP_LIBS_DIRECTORY_PATH'
    if (airgapLibsPath) {
        println "Running air gapped from ${airgapLibsPath}"
    } else {
        println 'Running in online mode'
    }
    
    repositories {
        if (airgapLibsPath) {
            flatDir {
                dirs airgapLibsPath
            }
        } else {
            mavenLocal()
            mavenCentral()
        }
    }

    dependencies {
        if (airgapLibsPath) {
            new File(airgapLibsPath).eachFile {
                String fileName = it.name.find('.*\\.jar')?.replace('.jar', '')
                if (fileName) {
                    classpath name: fileName
                }
            }
        } else {
            classpath 'com.blackducksoftware.integration:integration-gradle-inspector:GRADLE_INSPECTOR_VERSION'
        }
    }
}

addListener(
        new TaskExecutionListener() {
            boolean executed = false;

            void beforeExecute(Task task) { }
            void afterExecute(Task task, TaskState state) {
                if (executed) {
                    return
                } else {
                    executed = true
                }

                File outputDirectory = new File(task.project.buildDir, 'blackduck')
                outputDirectory.mkdirs()
               
                def dependencyGatherer = new DependencyGatherer()
                def rootProject = task.project
                dependencyGatherer.createAllCodeLocationFiles(rootProject, 'EXCLUDED_PROJECT_NAMES', 'INCLUDED_PROJECT_NAMES', 'EXCLUDED_CONFIGURATION_NAMES', 'INCLUDED_CONFIGURATION_NAMES', outputDirectory)
           }
       })